single-input:
    NEWLINE
    simple-statement
    compound-statement NEWLINE

file-input:
    ENDMARKER
    statement file-input
    NEWLINE file-input

newlines:
    NEWLINE newlines_opt

eval-input:
    expression-list-ternary newlines_opt ENDMARKER

decorator:
    @ dotted_name NEWLINE
    @ dotted_name ( ) NEWLINE
    @ dotted_name ( argument-list ) NEWLINE

decorators:
    decorator
    decorator decorators

decorated:
    decorators class-definition
    decorators function-definition
    decorators async-function-definition

async-function-definition:
    async function-definition

function-definition:
    def NAME ( function-parameter-list_opt ) : suite
    def NAME ( function-parameter-list_opt ) -> ternary-expression : suite

parameter:
    NAME

annotated-parameter:
    parameter
    parameter : ternary-expression

function-parameter:
    annotated-parameter
    annotated-parameter = ternary-expression
    *
    * annotated-parameter
    ** annotated-parameter

function-parameter-list:
    function-parameter function-parameter-list

lambda-parameter-list:
    lambda-parameter lambda-parameter-list

lambda-parameter:
    parameter
    parameter = ternary-expression
    *
    * parameter
    ** parameter

statement:
    simple-statement
    compound-statement

simple-statement:
    small-statement ; simple-statement
    small-statement NEWLINE
    small-statement ; NEWLINE

small-statement:
    expression-statement
    del-statement
    pass-statement
    flow-statement
    import-statement
    global-statement
    nonlocal-statement
    assert-statement

chained-assignment:
    tuple-expression
    chained-assignment = yield-expression
    chained-assignment = tuple-expression

expression-statement:
    chained-assignment
    tuple-expression : ternary-expression
    tuple-expression : ternary-expression = ternary-expression
    tuple-expression augmented-assignment-operator yield-expression
    tuple-expression augmented-assignment-operator expression-list-ternary

tuple-expression:
    ternary-expression
    ternary-expression ,
    unpack-expression
    unpack-expression ,
    ternary-expression , tuple-expression
    unpack-expression , tuple-expression

augmented-assignment-operator:
    +=
    -=
    *=
    @=
    /=
    %=
    &=
    |=
    ^=
    <<=
    >>=
    **=
    //=

del-statement:
    del expression-list-bitwise-unpack

pass-statement:
    pass

flow-statement:
    break-statement
    continue-statement
    return-statement
    raise-statement
    yield-statement

break-statement:
    break

continue-statement:
    continue

return-statement:
    return
    return expression-list-ternary

yield-statement:
    yield-expression

raise-statement:
    raise
    raise ternary-expression
    raise ternary-expression from ternary-expression

import-statement:
    import-name
    import-from

import-name:
    import dotted_as_names

dots:
    .
    ...
    dots .
    dots ...

import_source:
    dots
    dotted_name
    dots dotted_name

import_set:
    *
    ( import_as_names )
    import_as_names

import-from:
    from import_source import import_set

import_as_names:
    import_as_name
    import_as_name ,
    import_as_name , import_as_names

import_as_name:
    NAME
    NAME as NAME

dotted_as_name:
    dotted_name
    dotted_name as NAME

dotted_as_names:
    dotted_as_name
    dotted_as_names , dotted_as_name

dotted_name:
    NAME
    dotted_name . NAME

global-statement:
    global NAME
    global-statement , NAME

nonlocal-statement:
    nonlocal NAME
    nonlocal-statement , NAME

assert-statement:
    assert ternary-expression
    assert-statement , ternary-expression

compound-statement:
    if-statement
    while-statement
    for-statement
    try-statement
    with-statement
    function-definition
    class-definition
    decorated
    async-statement

async-statement:
    async function-definition
    async with-statement
    async for-statement

elif-chain:
    elif ternary-expression : suite
    elif ternary-expression : suite elif-chain

if-statement:
    if ternary-expression : suite
    if ternary-expression : suite else : suite
    if ternary-expression : suite elif-chain
    if ternary-expression : suite elif-chain else : suite

while-statement:
    while ternary-expression : suite
    while ternary-expression : suite else : suite

for-statement:
    for expression-list-bitwise-unpack in expression-list-ternary : suite
    for expression-list-bitwise-unpack in expression-list-ternary : suite else : suite

except-clauses:
    except-clause : suite
    except-clauses except-clause : suite

try-statement:
    try : suite except-clauses
    try : suite except-clauses else : suite
    try : suite finally : suite
    try : suite except-clauses finally : suite
    try : suite except-clauses else : suite finally : suite

with-item:
    ternary-expression
    ternary-expression as bitwise-or-expression

with-items:
    with-item
    with-items , with-item

with-statement:
    with with-items : suite

except-clause:
    except
    except ternary-expression
    except ternary-expression as NAME

statements:
    statement
    statement statements

suite:
    simple-statement
    NEWLINE INDENT statements DEDENT

ternary-expression:
    logical-or-expression
    logical-or-expression if logical-or-expression else ternary-expression
    lambda-definition

lambda-expression:
    logical-or-expression
    lamba-definition-noternary

lambda-definition:
    lambda lambda-parameter-list_opt : ternary-expression

lamba-definition-noternary:
    lambda lambda-parameter-list_opt : lambda-expression

logical-or-expression:
    logical-and-expression
    logical-or-expression or logical-and-expression

logical-and-expression:
    not-expression
    logical-and-expression and not-expression

not-expression:
    not not-expression
    comparison

comparison:
    xor-expression
    comparison comparison-operator bitwise-or-expression

comparison-operator:
    <
    >
    ==
    >=
    <=
    <>
    !=
    in
    not in
    is
    is not

unpack-expression:
    * bitwise-or-expression

bitwise-or-expression:
    xor-expression
    bitwise-or-expression | xor-expression

xor-expression:
    bitwise-and-expression
    xor-expression ^ bitwise-and-expression

bitwise-and-expression:
    shift-expression
    bitwise-and-expression & shift-expression

shift-expression:
    add-expression
    shift-expression << add-expression
    shift-expression >> add-expression

add-expression:
    multiply-expression
    add-expression + multiply-expression
    add-expression - multiply-expression

multiply-expression:
    unary-expression
    multiply-expression * unary-expression
    multiply-expression @ unary-expression
    multiply-expression / unary-expression
    multiply-expression % unary-expression
    multiply-expression // unary-expression

unary-expression:
    + unary-expression
    - unary-expression
    ~ unary-expression
    power-expression

power-expression:
    postfix-expression
    postfix-expression ** unary-expression

postfix-expression:
    primary-expression
    await primary-expression
    postfix-expression trailer

string:
    STRING
    string STRING

primary-expression:
    ( )
    ( yield-expression )
    ( comprehension-expression )
    [ comprehension-expression_opt ]
    { dictionary_opt }
    NAME
    NUMBER
    string
    ...
    None
    True
    False

expression-list-ternary-unpack:
    ternary-expression ,_opt
    unpack-expression ,_opt
    ternary-expression , expression-list-ternary-unpack
    unpack-expression , expression-list-ternary-unpack

comprehension-expression:
    expression-list-ternary-unpack
    ternary-expression comprehension-for
    unpack-expression comprehension-for

trailer:
    ( )
    ( argument-list )
    [ subscript-list ]
    . NAME

subscript-list:
    subscript
    subscript ,
    subscript , subscript-list

subscript:
    ternary-expression
    ternary-expression_opt : ternary-expression_opt slice-operation_opt

slice-operation:
    : ternary-expression

expression-list-bitwise-unpack:
    bitwise-or-expression ,_opt
    unpack-expression ,_opt
    bitwise-or-expression , expression-list-bitwise-unpack
    unpack-expression , expression-list-bitwise-unpack

expression-list-ternary:
    ternary-expression ,_opt
    ternary-expression , expression-list-ternary

dictionary-argument-named:
    ternary-expression : ternary-expression
    ** bitwise-or-expression

dictionary-argument-named-list:
    dictionary-argument-named
    dictionary-argument-named ,
    dictionary-argument-named , dictionary-argument-named-list

dictionary-argument-positional:
    ternary-expression
    * bitwise-or-expression

dictionary-argument-positional-list:
    dictionary-argument-positional
    dictionary-argument-positional ,
    dictionary-argument-positional , dictionary-argument-positional-list

dictionary:
    dictionary-argument-named comprehension-for
    dictionary-argument-named-list
    dictionary-argument-positional comprehension-for
    dictionary-argument-positional-list

class-definition:
    class NAME : suite
    class NAME () : suite
    class NAME ( argument-list ) : suite

argument-list:
    argument
    argument ,
    argument , argument-list

argument:
    ternary-expression
    ternary-expression comprehension-for
    ternary-expression = ternary-expression
    ** ternary-expression
    * ternary-expression

comprehension-iteration:
    comprehension-for
    comprehension-if

sync-comprehension-for:
    for expression-list-bitwise-unpack in logical-or-expression
    for expression-list-bitwise-unpack in logical-or-expression comprehension-iteration_opt

comprehension-for:
    async_opt sync-comprehension-for

comprehension-if:
    if lambda-expression
    if lambda-expression comprehension-iteration_opt

yield-expression:
    yield
    yield yield-argument

yield-argument:
    from ternary-expression
    expression-list-ternary
